---
title: "TALE mining in bacterial sequences"
author: "Seb"
date: "`r Sys.time()`"
output:
  html_document:
    theme: cerulean
    highlight: tango
    toc: true
    toc_float:
      collapsed: true
      smooth_scroll: true
    number_sections: true
    code_folding: hide
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tantale)
```

# Download reference genomes
`biomattr` package does not work well for most of strains (or I did not use right instruction ...)

```{r}
test_path <- system.file("test", package = "tantale", mustWork = T)
seq.name = c("MAI129", "MAI68", "MAI1", "BAI3")
accession = c("NZ_CP019090.1", "NZ_CP019085.1", "CP025609.1", "CP025610.1")
genome_path <- file.path(test_path, "genomes")
dir.create(genome_path, recursive = T)

for (i in 1:length(accession)) {
  fa_file <- paste0(genome_path, "/", seq.name[i], ".fa")
  seq <- ape::read.GenBank(access.nb = accession[i])
  names(seq) <- as.character(seq.name[i]) ## ISN'T IT A PROBLEM IF ALL THE SEQUENCES HAVE THE SAME NAME?
  ape::write.FASTA(seq, fa_file)
}

```


# run telltale

```{r}
subjectFile <- list.files(genome_path, "*.fa$", full.names = T)
telltale_outdir <- file.path(test_path, "telltale_output")
io_args <- lapply(as.list(subjectFile), function(x) {
  outdirname <- unlist(strsplit(basename(x), ".fa"))
  outputDir <- file.path(telltale_outdir, outdirname)
  dir.create(outputDir, recursive = T, showWarnings = F)
  list("subjectFile" = x, "outputDir" = outputDir)
})

lapply(io_args, function(x) {
  tellTale_args <- list(
    subjectFile = x$subjectFile,
    outputDir = x$outputDir,
    minRatioOfGapForColMasking = 0.8,
    TALE_NtermDNAHitMinScore = 300,
    repeatDNAHitMinScore = 20,
    TALE_CtermDNAHitMinScore = 200,
    minDomainHitsPerSubjSeq = 4,
    mergeHits = TRUE,
    repMsaMethod = "decipher",
    minGapWidth = 35,
    minDomainHitsPerArrayForAssembl  = 5,
    taleArrayStartAnchorCode = "N-TERM",
    taleArrayEndAnchorCode = "C-TERM",
    rvdSep = " ")
  do.call(tantale::tellTale, tellTale_args)
})

```



```{r TROUBLESHOOTING, eval=FALSE}
subjectFile = io_args[[1]]$subjectFile
outputDir = io_args[[1]]$outputDir
minRatioOfGapForColMasking = 0.8 # columns of the tale repeat CDS alignment that contain a gap in a fraction of sequence higher than this value (betwen 0 and 1) will be masked from the alignment when translating the DNA sequences to protein.
TALE_NtermDNAHitMinScore = 300 # nhmmer score cut_off value
repeatDNAHitMinScore = 20  # nhmmer score cut_off value
TALE_CtermDNAHitMinScore = 200  # nhmmer score cut_off value
minDomainHitsPerSubjSeq = 4  # Minimum number of nhmmer hits for a subject sequence to be reported as having TALE diagnostic regions. This is a way to simplify output a little by getting ride of uninformative sequences
minGapWidth = 35  # minimum gap between two tale domain hits for them to be considered "contiguous" and grouped in the same array.
mergeHits = TRUE
repMsaMethod = "decipher"
minDomainHitsPerArrayForAssembl = 5    # Minimum number of repeat in an array for its seq of RVD to be considered for assembly. This is a way to get ride of sequences that are too short reasonably be of any help for assembly
taleArrayStartAnchorCode = "N-TERM"
taleArrayEndAnchorCode = "C-TERM"
rvdSep = " "
hmmFilesDir = system.file("extdata", "hmmProfile", package = "tantale", mustWork = T)
hmmerpath = system.file("tools", "hmmer-3.3", "bin", package = "tantale", mustWork = T)

```


```{r TROUBLESHOOTING, eval=FALSE}
tellTale(subjectFile = io_args[[1]]$subjectFile,
  outputDir = io_args[[1]]$outputDir,
  minRatioOfGapForColMasking = 0.8,
  TALE_NtermDNAHitMinScore = 300,
  repeatDNAHitMinScore = 20,
  TALE_CtermDNAHitMinScore = 200,
  minDomainHitsPerSubjSeq = 4,
  mergeHits = TRUE,
  repMsaMethod = "decipher",
  minGapWidth = 35,
  minDomainHitsPerArrayForAssembl  = 5,
  taleArrayStartAnchorCode = "N-TERM",
  taleArrayEndAnchorCode = "C-TERM",
  rvdSep = " ")

```



# run AnnoTALE

```{r}
subjectFile <- list.files(genome_path, "*.fa", full.names = T)
annotale_outdir <- file.path(test_path, "annotale_output")

lapply(subjectFile, function(fastaFile) {
  outdirname <- unlist(strsplit(basename(fastaFile), ".fa"))
  outputDir <- file.path(annotale_outdir, outdirname)
  dir.create(outputDir, recursive = T, showWarnings = F)
  analyzeAnnoTALE(inputFastaFile = fastaFile,
                  outputDir = outputDir
  )
})

talesRvdStringsFiles <- list.files(file.path(annotale_outdir),
                                   pattern = "TALE_RVDs.fasta",  full.names = TRUE, recursive = TRUE)
rvdVectors <- do.call(c, lapply(talesRvdStringsFiles, fa2liststr))
saveRDS(rvdVectors, file.path(annotale_outdir, "rvdVectors.rds"))

talesDNAFiles <- list.files(file.path(annotale_outdir),
                            pattern = "TALE_DNA_sequences_.*\\.fasta$", recursive = TRUE, full.names = TRUE)

```



# run Distal with AnnoTALE output

```{r}
DistalWithAnnotaleOutDir <- file.path(test_path, "distal_with_annotale")
dir.create(DistalWithAnnotaleOutDir, showWarnings = TRUE)
combine_input <- file.path(DistalWithAnnotaleOutDir, "combined_CDS_Seqs.fas")
if (file.exists(combine_input)) {file.remove(combine_input)}
file.append(combine_input, talesDNAFiles)
combine_fa <- ape::read.FASTA(combine_input)
names(combine_fa)
distal_output <- runDistal(combine_input, outdir = DistalWithAnnotaleOutDir)
str(distal_output)
saveRDS(distal_output, file.path(DistalWithAnnotaleOutDir, "distal_output.rds"))
```


# reformat annotale output and rerun distal
```{r}
anno_output <- ape::read.FASTA(combine_input)
names(anno_output) <- gsub(" \\[.*\\]", "", names(anno_output))
ape::write.FASTA(anno_output, combine_input, header = T)
distal_output <- runDistal(combine_input, outdir = DistalWithAnnotaleOutDir, overwrite = F)
distal_group <- buildDisTalGroups(DistalWithAnnotaleOutDir, 9, overwrite = F)
distal_group # ok it works
```



