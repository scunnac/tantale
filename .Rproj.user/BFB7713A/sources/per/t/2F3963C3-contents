---
title: "Showcase functions for TALE classification and phylogeny"
author: "Seb"
date: "`r Sys.time()`"
output:
  html_document:
    theme: cerulean
    highlight: tango
    toc: true
    toc_float:
      collapsed: true
      smooth_scroll: true
    number_sections: true
    code_folding: hide
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tantale)
```

# A buildt-in approach for TALE classification

## Gather data on rvd sequences and use Distale output to inferr tale groups

```{r}
# load distal objects
distal_output <- readRDS(file.path(system.file("test/distal_with_annotale", package = "tantale", mustWork = T), "distal_output.rds"))
repeatVectors <- distal_output$coded.repeats.str
repeatSim <- distal_output$repeat.similarity
distalRepeatDistMatFile <- system.file("test/distal_with_annotale", "Output_Repeatmatrix.mat", package = "tantale", mustWork = T)
taleSim <- distal_output$tal.similarity

# Define groups using Distal tale distances
taleGroups <- groupTales(taleSim, 20, plot = TRUE)


# load rvd vectors from Annotale output
rvdVectors <- readRDS(file.path(system.file("test/annotale_output", package = "tantale"), "rvdVectors.rds"))
# ADD N and C term Labels for each TALE (with tellTale this would not be necessary)
rvdVectors <- lapply(rvdVectors, function(x) c("NTERM", x, "CTERM"))

rep2rvd <- getRepeat2RvdMapping(repeatVectors, rvdVectors)
rep2rvd %>% dplyr::arrange(RVD) %>% print(n= Inf)

```


## Generate multiple sequence alignments with a wrapper to MAFFT7


```{r}
# Generate repeat seq msa for each group
scaledRepeatSim <- repeatSim
scaledRepeatSim$Sim <- scale(repeatSim$Sim)

repeatMsaByGroup <- lapply(sort(unique(taleGroups$group)), function(G) {
  repeatVectorsForGroup <- repeatVectors[taleGroups$name[taleGroups$group == G]]
  repeatMsa <- buildRepeatMsa(inputSeqs = repeatVectorsForGroup)
  }
)

# Generate rvd seq msa for each group
rvdMsaByGroup <- lapply(sort(unique(taleGroups$group)), function(G) {
  rvdVectorsForGroup <- rvdVectors[taleGroups$name[taleGroups$group == G]]
  rvdMsa <- buildRepeatMsa(inputSeqs= rvdVectorsForGroup)
  return(rvdMsa)
  }
)

```


**NOTE**:  

- With distalRepeatSims, the alignments are worse...  
- Other potentially usable alternative opts for MAFFT : opts <- c(GINSi = "--globalpair --maxiterate 1000 --reorder", LINSi = "--localpair --maxiterate 1000 --reorder", EINSi = "--genafpair --maxiterate 1000 --reorder")   --op [gap open penalty] and --ep [offset value, which functions like a gap extension penalty --op 1.53 --ep 0.123 can be multiplied by three fro RNA  




## Testing TALE msa conversion functions usefull for plotting pretty alignments


```{r}
convertRepeat2Rvd(repeatAlign = repeatMsaByGroup[[8]], repeat2RvdMapping = rep2rvd)
rvdMsaByGroup[[2]]
```


```{r}
convertRepeat2SimAlign(repeatAlign = repeatMsaByGroup[[4]], repeatsims = repeatSim)
convertRepeat2SimAlign(repeatAlign = repeatMsaByGroup[[4]], repeatsims = repeatSim, refTag = "MAI1-")
```


```{r, eval=FALSE}
convertRvd2MatchAlign(rvdAlign = rvdMsaByGroup[[4]])
convertRvd2MatchAlign(rvdAlign = rvdMsaByGroup[[4]], refTag = "MAI1-")
```

## test plotting
```{r}

# save files for repcode plot
saved_files_path <- file.path(system.file("test/distal_with_annotale", package = "tantale", mustWork = T), "plots")
dir.create(saved_files_path, showWarnings = F)
for (i in 1:length(repeatMsaByGroup)) {
  repclust_matrix <- convertRepeat2ClusterIDAlign(repeatSim = repeatSim, repeatAlign = repeatMsaByGroup[[i]])
  imgFile <- file.path(saved_files_path, paste0("Repcode_", i, ".svg"))
  tantale::heatmap_msa(talsim =  taleSim, forMatrix = repclust_matrix, forCellNote = repeatMsaByGroup[[i]], plot.type = "repeat.clusters", main = glue::glue("Group {i}"), save.path = imgFile)
}

# save files for rvd plot
for (i in 1:length(rvdMsaByGroup)) {
  rvdDist <- convertRepeat2SimAlign(repeatAlign = repeatMsaByGroup[[i]], repeatsims = repeatSim)
  rvdMSA <-  convertRepeat2RvdAlign(repeatAlign = repeatMsaByGroup[[i]], repeat2RvdMapping = rep2rvd)
  imgFile <- file.path(saved_files_path, glue::glue("RVD_{i}.svg"))
  tantale::heatmap_msa(talsim =  taleSim, forMatrix = rvdDist, forCellNote = rvdMSA, rvdSim = convertRvd2MatchAlign(rvdMsaByGroup[[i]]), plot.type = "repeat.similarity", main = glue::glue("Group {i}"), save.path = imgFile)
}

```


# plot distal output resulted from annotale
after running `01_TALE_mining_in_bacterial_sequences.rmd`
```{r}
saved_files_path <- file.path(system.file("test/distal_with_annotale", package = "tantale", mustWork = T), "buildDisTal_plots")
dir.create(saved_files_path, showWarnings = F)

# repcode
for (i in names(distal_group$SeqOfRepsAlignments)) {
  clustID_matrix <- tantale::convertRepeat2ClusterIDAlign(repeatSim = distal_output$repeat.similarity, repeatAlign =  distal_group$SeqOfRepsAlignments[[i]])
  imgFile <- file.path(saved_files_path, paste0("Repcode_", i, ".svg"))
  tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = clustID_matrix, forCellNote = distal_group$SeqOfRepsAlignments[[i]], plot.type = "repeat.clusters", main = i, save.path = imgFile)
}

# rvd
for (i in names(distal_group$SeqOfRepsAlignments)) {
  imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
  tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", main = i, save.path = imgFile)
}

```

