# Group alignements
library(gplots)
library(stringr)
library(dendextend)
library(reshape2)
library(scales)
library(readr)


TALgroupsFile <- "/home/baotram/tal/xanthopore-scripts/tantale/test/distal_output/TALgroups.txt"
TEVMAT_TALFile <- "/home/baotram/tal/xanthopore-scripts/tantale/test/distal_output/Output.mat"
AfALIGNSDir <- "/home/baotram/tal/xanthopore-scripts/tantale/test/distal_output/ALIGNS"

TALgroups <- readr::read_delim(TALgroupsFile," ", escape_double = FALSE, trim_ws = TRUE)

TAL_MAT<- as.matrix(read.table(TEVMAT_TALFile, header=TRUE, sep = "\t",row.names = 1, as.is=TRUE))
TAL_MAT<- TAL_MAT[,1:(ncol(TAL_MAT)-1)]
colnames(TAL_MAT)<-rownames(TAL_MAT)
meltMAT<-reshape2::melt(TAL_MAT)
meltMAT<-merge(meltMAT,TALgroups,by.x="Var1",by.y="TAL")
meltMAT<-merge(meltMAT,TALgroups,by.x="Var2",by.y="TAL")
colnames(meltMAT)<-c("ID1","ID2","Distance","Group1","Group2")

# matname1<-as.data.frame(stringr::str_split_fixed(meltMAT$ID1, "[|]", 4)[,1:3])
# meltMAT$ID1<-paste(matname1$V1,matname1$V2,matname1$V3, sep = "|")
# matname2<-as.data.frame(stringr::str_split_fixed(meltMAT$ID2, "[|]", 4)[,1:3])
# meltMAT$ID2<-paste(matname2$V1,matname2$V2,matname2$V3, sep = "|")

myfailed <-list()
failcount<-0

groupvec <- unique(TALgroups$Group)

for (i in 1:length(groupvec)){
## Iterating over TALE groups
  #G<-4
  G<-groupvec[i]

  RVD <- readr::read_delim(file.path(AfALIGNSDir, paste0("G", G, ".RVDs")),
                    "\t", escape_double = FALSE, col_names = FALSE,
                    trim_ws = TRUE)

  Dist <- readr::read_delim(file.path(AfALIGNSDir, paste0("G", G, ".Dists")),
                     "\t", escape_double = FALSE, col_names = FALSE,
                     trim_ws = TRUE)
  mynum<-RVD # This is a TALE multiple alignment with RVDs in each column
  mymat<-Dist # This is a TALE alignment-like matrix as above with for each colomn of alignment the distance of each aligned repeat unit relative to the reference
  
  mymat <- dist_within_group[dist_within_group$Group == "4", -ncol(dist_within_group)]
  mynum <- RVDgroups[RVDgroups$Group == "4", -ncol(RVDgroups)]
  if (nrow(mymat) > 1){
    for (i in mymat$X1) {
      if (all(is.numeric(mymat[mymat$X1 == i, -c(1, ncol(mymat))]), mymat[mymat$X1 == i, -c(1, ncol(mymat))] == 0)) {myfirst <- i}
    }
    
    # Not clear what is going on here. Getting TALE names in the same format as in meltMAT to be able to match names across objects
    # mynames<-as.data.frame(str_split_fixed(Dist$X1, "[|]", 4)[,1:3])
    # mynames<-paste(mynames$V1,mynames$V2,mynames$V3, sep = "|")
    # mymat$X1<-mynames
    # mynum$X1<-mynames
    # myfirst<- mynum$X1[1] # This is the TALE that is used as a reference in the multiple alignment.

    my_palette <- colorRampPalette(c("dodgerblue", "white"))(n = 100)

    mySub<-meltMAT[meltMAT$ID1 %in% mymat$X1,] # Fetching records from meltMAT that are in the TALE group under analyzins
    mySub<-mySub[mySub$ID2 %in% mymat$X1,] # Fetching records from meltMAT that are in the TALE group under analyzins
    GroupDist <- as.matrix(reshape2::acast(mySub, ID1 ~ ID2, value.var="Distance")) # Creating a TALE distance matrix (rather than melted data frame)

    # Reoredering rows of everything
    mymat <- mymat[order(mymat$X1),]
    mynum <- mynum[order(mynum$X1),]
    GroupDist<-GroupDist[order(rownames(GroupDist)),]
    GroupDist<-GroupDist[order(colnames(GroupDist)),]
    # Creating a Hierchical clustering tree of TALEs based on distances
    Groupclus <-hclust(as.dist(GroupDist))
    Groupdend<-as.dendrogram(Groupclus)
    plot(Groupdend)


    myind<-which(mymat$X1 == myfirst) # Index of reference TALE
    # mynum <- mynum[,2:ncol(mynum)] # Remove column of names
    # def <- as.matrix(100 - mymat[,2:ncol(mymat)]) # substracting distances from 100

    # Creating a 'color matrix' of the same shape as mynum and def
    # This it to color RVDs depending by position depending on whther they match the 'reference' RVD at that position
    clade_order <- order.dendrogram(Groupdend) # Get order of indexes in the dendrogram
    myrvcol <- mynum[clade_order,]
    for (i in 1:ncol(myrvcol)){
      myval = as.character(mynum[myind,i])
      myrvcol[,i]<-ifelse(myrvcol[,i] == myval,"black","red")
    }

    myrvcol<-t(as.matrix(myrvcol[-1,]))

    plotCode <- expression(
      a <- gplots::heatmap.2(def, ##INPUT
                     Rowv = Groupdend, ##INPUT
                     Colv = FALSE, dendrogram = "row",
                     density.info="none",trace = "none",
                     col = my_palette, ##INPUT
                     margins =c(4,10),
                     cellnote  = mynum, ##INPUT
                     notecol = myrvcol, ##INPUT
                     lhei = c(0.1, 0.1) ,lwid = c(0.8, 4), ## PARAMS in ...
                     colsep = 0:(ncol(def) - 0),
                     rowsep = 0:(nrow(def) - 0),
                     sepcolor="#666666",
                     sepwidth=c(0.01,0.01),
                     #notecex = 1.1,
                     labCol = c(1:ncol(mymat)), ##INPUT, can be derived from 'def'?
                     adjCol = c(NA, 0.4),
                     offsetCol = 0,
                     labRow = gsub("\\|", "_", gsub(pattern = "(Xooa\\|)", replacement = "", x = rownames(GroupDist))), ## THIS SHOULD NOT BE DELGATED TO THIS FUNCTION BUT USER PROVIDED
                     offsetRow = 0, key.title = NA,
                     key.xlab = "AA identity", main = paste("Group G",G,sep=""),
                     xlab = "Position", ylab = "TAL ID",
                     cexRow = 1,
                     na.color="grey")
    )

    possibleError <- tryCatch(eval(plotCode),
                              error=function(e) e)
    if(inherits(possibleError, "error")) {failcount <- failcount+1
    myfailed[[failcount]] <- G}
    if(inherits(possibleError, "error")) next

    svg(filename=paste("G",G,".svg",sep=""),width = 10, height = 6)
    eval(plotCode)
    dev.off()

  }
}



####################################Heatmaps with repeat identity

library(ape)
library(readr)

#Create colo vector assigning equal hue to similar repeats

TEVMATRepDistFile <- "/home/baotram/tal/xanthopore-scripts/tantale/test/distal_output/BigRepDist.mat"
# This is the matrix of distance between all 'repeat unit sequences'
Distalmat<-as.matrix(read.table(TEVMATRepDistFile, header=TRUE, sep = "\t",row.names = 1, as.is=TRUE))
# Build a hc tree of the repeast in the distance matrix
Distclus<-hclust(as.dist(Distalmat))
plot(Distclus)
plot(as.dendrogram(Distclus))

# This seems to build a clustering of the repeats in to groups D5 or D10 depending on their position in the hclust tree
myDistcut<-as.data.frame(cbind(Distclus$labels,cutree(Distclus, h = 5)))
colnames(myDistcut)<-c("Reps","D5")
myDistcut$D10<-cutree(Distclus, h = 10) #identity height of repeats
#myDistcut$D15<-cutree(Distclus, h = 15)
#myDistcut$D20<-cutree(Distclus, h = 20)

b<-100-Distalmat

# Get the positions of the 'rep's in the tree
# And merge with the clusterinf of reps (myDistcut)
orderRep<- order.dendrogram(as.dendrogram(Distclus))
RepID<- myDistcut$Reps
Rep_position <- data.frame(RepID,
                           orderRep)
Rep_position<-merge(Rep_position,myDistcut, by.x = "RepID", by.y = "Reps", sort = FALSE)
Rep_position<-Rep_position[order(Rep_position$orderRep),]
# Add a color column with a color specific of a D10 groups
Rep_position$mycol <- scales::hue_pal(l = 75)(nlevels(as.factor(Rep_position$D10)))[Rep_position$D10]

# Build a nj tree of the repeast in the distance matrix. Why NJ??????
phyrep <- ape::nj(as.matrix(as.dist(Distalmat)))
bla<-merge(phyrep$tip.label, Rep_position, by.x = "x", by.y = "RepID", sort =FALSE)
phyrep$tip.label<-as.vector(bla$D10)
phyl <- ape::as.phylo(Distclus)
# Plot the nj tree with colors to check and contrast with the repeat clustering done before, I guess.
plot(phyl, type = "u", tip.color=Rep_position$mycol, show.tip.label=TRUE, cex=0.6, use.edge.length = TRUE)
# I am not so sure what this is doing....
plot(sort(Rep_position$orderRep), Rep_position$RepID, pch = 19, col = Rep_position$mycol)


myfailed <-list()
failcount<-0
groupvec <- unique(TALgroups$Group)

for (i in 1:length(groupvec)){

  G<-groupvec[i]
  #G<-4
  #try(dev.off())
  repAlignmentFile <- paste("/home/baotram/tal/xanthopore-scripts/tantale/test/distal_output/ALIGNS/G",G,".Reps", sep ="")
  Reps <- readr::read_delim(repAlignmentFile,
                     "\t", escape_double = FALSE, col_names = FALSE,
                     trim_ws = TRUE, na = "-")

  Reps <- Reps[order(Reps$X1),]

  mymat<-as.matrix(Reps[,2:ncol(Reps)])

  if (nrow(mymat) > 1){

    Reps[is.na(Reps)] <- "-"
    mynum<-as.matrix(Reps[,2:ncol(Reps)])

    mynames<-as.data.frame(str_split_fixed(Reps$X1, "[|]", 4)[,1:3])
    mynames<-paste(mynames$V1,mynames$V2,mynames$V3, sep = "|")

    #my_palette=rainbow(nlevels(as.factor(myDistcut$D10)))[as.integer(myDistcut$D10)]

    mySub<-meltMAT[meltMAT$ID1 %in% Reps$X1,]
    mySub<-mySub[mySub$ID2 %in% Reps$X1,]
    GroupDist <- as.matrix(reshape2::acast(mySub, ID1 ~ ID2, value.var="Distance"))

    GroupDist<-GroupDist[order(rownames(GroupDist)),]
    GroupDist<-GroupDist[order(colnames(GroupDist)),]
    Groupclus <-hclust(as.dist(GroupDist))
    Groupdend<-as.dendrogram(Groupclus)

    mybreaks<-length(Rep_position$mycol)+1

    plotCode <- expression(a <- gplots::heatmap.2(mymat, ##INPUT
                                          Rowv = Groupdend, ##INPUT
                                          Colv = FALSE, dendrogram = "row",
                                          density.info="none",trace = "none",
                                          col = Rep_position$mycol, ##INPUT
                                          margins =c(4,10),
                                          cellnote  = mynum, ##INPUT
                                          notecol = "black",
                                          notecex = 0.8,
                                          key = FALSE,
                                          labCol = c(1:ncol(mymat)), ##INPUT, can be derived from 'def'?
                                          adjCol = c(NA, 0.5),
                                          offsetCol = 0,
                                          labRow = gsub("\\|", "_", gsub(pattern = "(Xooa\\|)", replacement = "", x = Reps$X1)), ## THIS SHOULD NOT BE DELGATED TO THIS FUNCTION BUT USER PROVIDED
                                          offsetRow = 0,
                                          cexRow = 1,
                                          key.title = NA,
                                          main = paste("Group G",G,sep=""),
                                          breaks = mybreaks, ##INPUT
                                          na.color="grey",
                                          lhei = c(0.1, 0.1) ,lwid = c(0.8, 4),
                                          xlab = "Position", ylab = "TAL ID"
                                          )
    )


    possibleError <- tryCatch(eval(plotCode), error=function(e) e)
    if(inherits(possibleError, "error")) {failcount <- failcount+1
    myfailed[[failcount]]<-G}
    if(inherits(possibleError, "error")) {dev.off()}
    if(inherits(possibleError, "error")) next

    svg(filename=paste(G, "REPSG", ".svg",sep=""), width = 10, height = 6)
    eval(plotCode)
    dev.off()

  }
}
