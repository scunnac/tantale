---
title: "hmmProfile"
author: "Tram"
date: "4/28/2020"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(ape)
library(muscle)
library(glue)
library(Biostrings)
devtools::load_all(path = "./tantale")
```

# Reference
```{r}
ref_all <-  read.table(file = "./reference_genomes.tsv", header = T, na.strings = "NA", stringsAsFactors = F, sep = "\t") 
ref <- ref_all[ref_all$TALE_hmm == T, ] # filter seqs for hmmProfile
```

## storing sequences in a database (a trial)
```{r}
library(RSQLite)
library(DBI)
library(dplyr)
library(DECIPHER)

# create database
ref_db <- DBI::dbConnect(RSQLite::SQLite(), "./xanthomonas_ref.sqlite")

# get sequences
seq1 <- read.GenBank(ref_all$NCBI_acc[1:2])
seq1 <- seq1 %>% as.character %>% lapply(., paste0, collapse="") %>% unlist %>% DNAStringSet
# names(seq1) <- ref_all$Strain_ID[1:2]

# write sequences to db
Seqs2DB(seqs = seq1, type =  "XStringSet", dbFile =  ref_db, identifier =  as.character(ref_all$Strain_ID[1:2]), tblName = "ref_hmmProfile", replaceTbl = T)
BrowseDB(ref_db, tblName = "ref_hmmProfile")

# get a sequence from db to a fasta file (example)
DB2Seqs("./seq1.fa", dbFile = ref_db, identifier =  as.character(ref_all$Strain_ID[1]), type = "DNAStringSet", tblName = "ref_hmmProfile")

# add a data frame to db
RSQLite::dbWriteTable(ref_db, name = "dataframe", value = "./reference_genomes.tsv", overwrite = T, colClasses = "character", header = T, sep = "\t")
BrowseDB(ref_db, tblName = "dataframe")
```


# Create hmm profile for Tals

## Save reference sequences
```{r}
hmm_dir <- file.path(system.file("extdata", package = "tantale", mustWork = T), "hmmProfile")
ref_dir <- file.path(hmm_dir, "ref_seqs")
dir.create(ref_dir, recursive = T)
ref_file <- file.path(ref_dir, "ref.fa")
if (file.exists(ref_file)) {file.remove(ref_file)}
```


```{r download in individual files}
for (i in 1:nrow(ref)) {
  fa_file <- paste0(ref_dir, "/", ref$Strain_ID[i], ".fa")
  seq <- read.GenBank(access.nb = ref$NCBI_acc[i])
  names(seq) <- as.character(ref$Strain_ID[i]) ## ISN'T IT A PROBLEM IF ALL THE SEQUENCES HAVE THE SAME NAME? --> No (maybe), 1 accession = 1 sequence
  ape::write.FASTA(seq, fa_file)
}

ref_list <- list.files(ref_dir, ".*\\.fa$", recursive = T, full.names = T)
file.append(ref_file, ref_list)
```


```{r download all together in 1 file}
seqs <- read.GenBank(ref$NCBI_acc)
names(seqs) <- unlist(lapply(names(seqs), function(x) ref[ref$NCBI_acc == x, "Strain_ID"]))
write.FASTA(seqs, ref_file)
```


```{r get sequences from local database}
DB2Seqs(ref_file, dbFile = ref_db, identifier =  as.character(ref$Strain_ID), type = "DNAStringSet", tblName = "ref_hmmProfile")
```

## get Tal repeat CDS/AA
```{r}
tal_predict_dir <- file.path(hmm_dir, "tal_predict")
tantale::analyzeAnnoTALE(inputFastaFile = ref_file, outputDir = tal_predict_dir)

# extract DNA/AA parts
annotale_outfiles <- list.files(tal_predict_dir, "(TALE_DNA_parts.fasta|TALE_Protein_parts.fasta)", recursive = T, full.names = T)
for (f in annotale_outfiles) {
  filename <- basename(f)
  type <- ifelse(grepl("DNA", filename), "CDS", "AA")
  for (p in c("N-terminus", "C-terminus", "repeat")) {
    part_file <- glue::glue("{tal_predict_dir}/TALE_{p}_{type}.fa")
    extract_cmd <- glue::glue("grep -A1 '{p}' {f} > {part_file}")
    system(extract_cmd)
  }
}
```

## Tal seqs alignment by muscle
```{r}
tal_parts_files <- list.files(tal_predict_dir, "^TALE_.*\\.fa$", full.names = T)
part_align_dir <- file.path(hmm_dir, "ref_alignment")
dir.create(part_align_dir)

for (f in tal_parts_files) {
  filename <- gsub("\\.fa", "", basename(f))
  align_file <- glue::glue("{part_align_dir}/{filename}_aligned.fa")
  if (grepl("CDS", filename)) {
    part <- Biostrings::readDNAStringSet(f, format = "fasta", seek.first.rec = T)
    part_align <- muscle::muscle(part)
    part_align <- as(part_align, "DNAStringSet")
  } else {
    part <- Biostrings::readAAStringSet(f, format = "fasta", seek.first.rec = T)
    part_align <- muscle::muscle(part)
    part_align <- as(part_align, "AAStringSet")
  }
  
  Biostrings::writeXStringSet(part_align, align_file, format = "fasta")
}
```

## build profile by hmmbuild
```{r}
hmmpath <- system.file("tools", "hmmer-3.3", "bin", package = "tantale", mustWork = T)

term_align_file <- list.files(hmm_dir, ".*_aligned.fa", full.names = T, recursive = T)
for (f in term_align_file) {
  align_filename <- basename(f)
  hmm_filename <- gsub("aligned.fa", "profile.hmm", align_filename)
  hmm_filename <- gsub("-terminus", "term", hmm_filename)
  option <- ifelse(grepl("CDS", hmm_filename), "--dna", "--amino")
  hmmbuild_cmd <- glue::glue("{hmmpath}/hmmbuild {option} {hmm_dir}/{hmm_filename} {f}")
  system(hmmbuild_cmd)
  }
```

## clean up
```{r}
unlink(c(ref_dir, part_align_dir, tal_predict_dir), recursive = T)
```

