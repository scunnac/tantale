> devtools::load_all()
Loading tantale
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in order.dendrogram(forRowv) : 
  'order.dendrogram' requires a dendrogram 
3.
stop("'order.dendrogram' requires a dendrogram") 
2.
order.dendrogram(forRowv) at distal_functions.R#443
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> devtools::load_all()
Loading tantale
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in get(col, mode = "function") : 
  object '#FFFFFF' of mode 'function' was not found 
3.
get(col, mode = "function") 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", col = forCol, margins = c(4, 
        10), cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#461
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> saved_files_path <- file.path(system.file("test/distal_with_annotale", package = "tantale", mustWork = T), "buildDisTal_plots")
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   clustID_matrix <- tantale::convertRepeat2ClusterIDAlign(repeatSim = distal_output$repeat.similarity, repeatAlign =  distal_group$SeqOfRepsAlignments[[i]])
+   imgFile <- file.path(saved_files_path, paste0("Repcode_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = clustID_matrix, forCellNote = distal_group$SeqOfRepsAlignments[[i]], forCol = distal_output$repeats.cluster$color, plot.type = "repeat.clusters", plot.name = i)
+   dev.off()
+ }
> saved_files_path <- file.path(system.file("test/distal_with_annotale", package = "tantale", mustWork = T), "buildDisTal_plots")
> devtools::load_all()
Loading tantale
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   clustID_matrix <- tantale::convertRepeat2ClusterIDAlign(repeatSim = distal_output$repeat.similarity, repeatAlign =  distal_group$SeqOfRepsAlignments[[i]])
+   imgFile <- file.path(saved_files_path, paste0("Repcode_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = clustID_matrix, forCellNote = distal_group$SeqOfRepsAlignments[[i]], forCol = distal_output$repeats.cluster$color, plot.type = "repeat.clusters", plot.name = i)
+   dev.off()
+ }
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row",  :
  Discrepancy: Rowv is FALSE, while dendrogram is `row'. Omitting row dendogram.
> devtools::load_all()
Loading tantale
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
> traceback()
3: get(col, mode = "function")
2: gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
       density.info = "none", trace = "none", col = forCol, margins = c(4, 
           10), cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
           0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix), 
       sepcolor = "#bbbbbb", sepwidth = c(0.005, 0.005), notecex = 1.1, 
       labCol = c(1:ncol(forMatrix)), adjCol = c(NA, 0.4), offsetCol = 0, 
       labRow = rownames(forMatrix), offsetRow = 0, key.title = NA, 
       key = forKey, key.xlab = forKeyxlab, main = plot.name, xlab = "Position", 
       ylab = "TAL ID", cexRow = 1, na.color = "grey") at distal_functions.R#461
1: tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
       forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
       plot.name = i)
> heat.colors(1)
[1] "#FF0000FF"
> devtools::load_all()
Loading tantale
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
In addition: Warning message:
In min(diff(breaks)/100) : no non-missing arguments to min; returning Inf
> devtools::load_all()
Loading tantale
> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
> i=1
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in plot.new() : figure margins too large 
7.
plot.new() 
6.
plot.default(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", 
    xaxs = xaxs, yaxs = yaxs, xlab = xlab, ylab = ylab, ...) 
5.
plot(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", xaxs = xaxs, 
    yaxs = yaxs, xlab = xlab, ylab = ylab, ...) 
4.
image.default(z = matrix(z, ncol = 1), col = col, breaks = tmpbreaks, 
    xaxt = "n", yaxt = "n") 
3.
image(z = matrix(z, ncol = 1), col = col, breaks = tmpbreaks, 
    xaxt = "n", yaxt = "n") 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", margins = c(4, 10), 
    cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#456
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite 
4.
(function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, 
    pos = NA, outer = FALSE, font = NA, lty = "solid", lwd = 1, 
    lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, 
    padj = NA, gap.axis = NA, ...)  ... 
3.
do.call(axis, xargs) 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", margins = c(4, 10), 
    cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#456
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> devtools::load_all()
Loading tantale
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
2: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
3: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
4: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
5: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
6: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
> devtools::load_all()
Loading tantale
> devtools::load_all()
Loading tantale
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in get(col, mode = "function") : 
  object '#FFFFFF' of mode 'function' was not found 
3.
get(col, mode = "function") 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", col = forCol, margins = c(4, 
        10), cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#456
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> devtools::load_all()
Loading tantale
There were 12 warnings (use warnings() to see them)
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite 
4.
(function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, 
    pos = NA, outer = FALSE, font = NA, lty = "solid", lwd = 1, 
    lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, 
    padj = NA, gap.axis = NA, ...)  ... 
3.
do.call(axis, xargs) 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", col = forCol, margins = c(4, 
        10), cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#457
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> devtools::load_all()
Loading tantale
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite 
4.
(function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, 
    pos = NA, outer = FALSE, font = NA, lty = "solid", lwd = 1, 
    lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, 
    padj = NA, gap.axis = NA, ...)  ... 
3.
do.call(axis, xargs) 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", margins = c(4, 10), 
    cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#457
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> for (i in names(groups_output$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
> i
[1] "G9"
> i = 1
> tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i)
 Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite 
4.
(function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, 
    pos = NA, outer = FALSE, font = NA, lty = "solid", lwd = 1, 
    lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, 
    padj = NA, gap.axis = NA, ...)  ... 
3.
do.call(axis, xargs) 
2.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", margins = c(4, 10), 
    cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#457
1.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 

> for (i in names(distal_group$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   try(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite
> for (i in names(distal_group$SeqOfRepsAlignments)) {
+   imgFile <- file.path(saved_files_path, paste0("RVD_", i, ".svg"))
+   svg(imgFile, width = 10, height = 6)
+   plot <- expression(tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", plot.name = i))
+   tryCatch(eval(plot))
+   # if(inherits(possibleError, "error")) {dev.off()}
+   dev.off()
+ }
 Error in (function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA,  : 
  no locations are finite 
9.
(function (side, at = NULL, labels = TRUE, tick = TRUE, line = NA, 
    pos = NA, outer = FALSE, font = NA, lty = "solid", lwd = 1, 
    lwd.ticks = lwd, col = NULL, col.ticks = NULL, hadj = NA, 
    padj = NA, gap.axis = NA, ...)  ... 
8.
do.call(axis, xargs) 
7.
gplots::heatmap.2(forMatrix, Rowv = forRowv, Colv = FALSE, dendrogram = "row", 
    density.info = "none", trace = "none", margins = c(4, 10), 
    cellnote = forCellNote, notecol = forNoteCol, lhei = c(0.1, 
        0.1), lwid = c(0.8, 4), colsep = 0:ncol(forMatrix), rowsep = 0:nrow(forMatrix),  ... at distal_functions.R#457
6.
tantale::heatmap_msa(talsim = distal_output$tal.similarity, forMatrix = distal_group$SeqOfDistancesAlignments[[i]], 
    forCellNote = distal_group$SeqOfRvdAlignment[[i]], plot.type = "repeat.similarity", 
    plot.name = i) 
5.
eval(plot) 
4.
eval(plot) 
3.
eval(plot) 
2.
tryCatchList(expr, classes, parentenv, handlers) 
1.
tryCatch(eval(plot)) 
